load("/Users/yuanyuanli/paper/maclogp/data/diabetes.RData")
dim(diabetes)
head(diabetes)
?diabetes
#'
#' @format A data frame with 442 rows and 11 variables:
#' \describe{
#'   \item{V1}{age}
#'   \item{V2}{sex}
#'   \item{V2}{sex}
#'   \item{V2}{sex}
#'
#' }
#' @source \url{http://www.diamondse.info/}
"diamonds"
library(lars)
library(maclogp)
tools::checkRdaFiles()
tools::checkRdaFiles("diabetes.RData")
data("diabetes")
diabetes
use_gpl_license()
usethis::use_gpl3_license()
?diabetes
library(maclogp)
?maclogp::diabetes
??maclogp::diabetes
?diabetes
data("diabetes")
diabetes
?lars::diabetes
maclogp::diabetes
maclogp::diabetes
?maclogp::diabetes
?maclogp::diabetes
devtools::check()
devtools::check()
devtools::check()
library(utils)
devtools::check()
library(maclogp)
devtools::check()
library(maclogp)
library(maclogp)
?maclogp::diabetes
?maclogp::MAC
library(maclogp)
?maclogp::MAC
library(maclogp)
?maclogp::MAC
?maclogp::diabetes
?maclogp::MAC
?glmnet
?glm
library(maclogp)
?maclogp::MAC
library(maclogp)
tinytex::tlmgr_install("psnfss")
tinytex::reinstall_tinytex()
tinytex::tlmgr_install("psnfss")
length(seq(0.05, 1, .025))
lm(Sepal.Length~Sepal.Width+ I(Sepal.Width^2), data=iris)
fit=lm(Sepal.Length~Sepal.Width+ I(Sepal.Width^2), data=iris)
?curve
curve(x^3 - 3*x, -2, 2)
plot(Sepal.Width,Sepal.Length)
fit=lm(Sepal.Length~Sepal.Width+ I(Sepal.Width^2), data=iris)
plot(iris$Sepal.Width,iris$Sepal.Length)
fit=lm(Sepal.Length~Sepal.Width+ I(Sepal.Width^2), data=iris)
plot(iris$Sepal.Width,iris$Sepal.Length)
lines(iris$Sepal.Width, fit$fitted.values)
fit=lm(Sepal.Length~Sepal.Width+ I(Sepal.Width^2), data=iris)
plot(iris$Sepal.Width,iris$Sepal.Length)
lines(sort(iris$Sepal.Width), fit$fitted.values[order(iris$Sepal.Width)],col="red")
1-pnorm(1.96)
?lmer()
library(lme4)
?lmer()
library(miceadds)
setwd("~/rcode_lmm")
source.all("rpql/R")
#source("Bondell.R")
source("rpqlpath.R")
source("NMCSlmm.R")
source("lmmfuncs.R")
# This is the first simulation example from the paper.
# The grid of fraction values is taken from 0.05 to 1 in steps of 0.025
require(mvtnorm)
require(tsutils)
library(lme4)
library(pracma)
library(nmcs)
library(parallel)
eva.lop=function(newlist, delta,K, B){
hat_prob= as.numeric(newlist$hat_prob)
hat_M_index= as.numeric(newlist$hat_M_index)
hat_logp = sapply(delta, function(x)nmcs:::logp_delta(hat_prob,x))
prob = mean(hat_M_index)
logP = sapply(delta, function(x)nmcs:::logp_delta(prob,x))
Elogp = colMeans(hat_logp)
RB = (Elogp - logP)/logP * 100
sd_hat_logp = apply(hat_logp, 2, sd)
CV = sd_hat_logp/ abs(Elogp)
result = data.frame(B, delta, Elogp, logP, RB, CV)
return(result)
}
eva.cs = function(width,cover, K, alpha,B){
##result of confidence sets
covering_prob = colSums(cover)/K
#length = colSums(2^width)/K
#ACP=covering_prob/ length
AW= colSums(width)/K
C.level= (1-alpha)*100
#SIS_rate= mean(sis_select)
result = data.frame( B, C.level, covering_prob, AW)
return(result)
}
flatten = function(alist,K){
newlist=alist[[1]]
if (K >1){
for(j in 2:K){
newlist=Map(rbind,newlist,alist[[j]])
}
}
return(newlist)
}
run_func=function(n, m, B, lambda_seq,alpha, family=gaussian(),penalty="adl",tune="bic1",delta=delta){
id = kronecker(1:n, rep(1,m))
true.beta = c(1, 1, rep(0,7))
true.D = matrix(c(9,4.8,0.6,0, 4.8,4,1,0, .6,1,1,0, 0,0,0,0), nrow=4, ncol=4)
p=length(true.beta)+nrow(true.D)
predictors=1:p
var_t=which(abs(c(true.beta,diag(true.D)))>0.001)
X= matrix(runif(m*n*9,-2,2), nrow=m*n)
Z= cbind(1,matrix(runif(m*n*3,-2,2), nrow=m*n))
simy <- gendat.glmm(id = list(cluster = id), X = X, beta =true.beta,
Z = list(cluster = Z), D = list(cluster = true.D), phi = 1, family = family)
y=simy$y
if (family$family[1]=="gaussian"){
fit_satlme4 <- lmer(y ~ X-1 + (Z-1 | id))
}else{
fit_satlme4 <- glmer(y ~ X-1 + (Z-1 | id),family=family,nAGQ = 0)
}
fit_sat <- build.start.fit(fit_satlme4, gamma = 2)
pen.weights=fit_sat$pen.weights
#pen.weights$fixed[1]=0
run=NMCS_rpql(y = y, X = X, Z =list(g1=Z), id =list(g1=id),
family=family, penalty=penalty,tune=tune,delta=delta,
lambda = lambda_seq,start=fit_sat,B=B,alpha=alpha,
pen.weights=pen.weights)
width =sapply(1: length(alpha), function(x)run$mcs[[x]]$width)
cover = sapply(1: length(alpha),function(x)all(
predictors[run$mcs[[x]]$LB] %in%c(0,var_t))
&all(var_t %in% predictors[run$mcs[[x]]$UB]))
#LogP
hat_M_index = as.numeric(all(predictors[run$hat_M$var_M] %in% c(0,var_t))&
all(var_t %in% predictors[run$hat_M$var_M]))
hat_prob =  run$hat_prob
result=list(width=width,cover=cover,hat_M_index=hat_M_index,
hat_prob=hat_prob)
return(result)
}
simu1 = function(n,m, B, alpha, K, cores,lambda,
family=gaussian(),penalty="adl",tune="bic1",delta=0.0001){
#Boot=lapply(1:K, function(x)run_func(B, lambda, alpha,family=family,penalty=penalty,tune=tune,delta=delta))
Boot = mclapply(1:K, function(x)run_func(n,m, B, lambda, alpha,family=family,
penalty=penalty,tune=tune,delta=delta),mc.cores=cores)
save(Boot,file = "Boot.RData")
k=length(Boot)
newlist = flatten(Boot,k)
##result of confidence sets
eva_cs=list()
eva_logp=list()
eva_cs= eva.cs( newlist$width,newlist$cover,K,
alpha,B)
eva_logp=eva.lop(newlist, delta,K, B)
write.table(cbind(familly=family$family[1],n,m, K, eva_cs), file ="cs_wo.csv", sep=",",
row.names=FALSE, col.names=FALSE,append = TRUE)
write.table(cbind(familly=family$family[1], n, m, K,eva_logp), file ="logp_wo.csv", sep=",",
row.names=FALSE, col.names=FALSE,append = TRUE)
return(list(eva_cs, eva_logp))
}
alpha=c(0.05,0.1)
B=200
K=100
cores=20
lambda_seq <- lseq(1e-6,0.5,length=20)
setwd("~/OneDrive - University of California, Davis/paper/LMM/rcode_lmm")
library(miceadds)
setwd("~/rcode_lmm")
source.all("rpql/R")
#source("Bondell.R")
source("rpqlpath.R")
source("NMCSlmm.R")
source("lmmfuncs.R")
# This is the first simulation example from the paper.
# The grid of fraction values is taken from 0.05 to 1 in steps of 0.025
require(mvtnorm)
require(tsutils)
library(lme4)
library(pracma)
library(nmcs)
library(parallel)
eva.lop=function(newlist, delta,K, B){
hat_prob= as.numeric(newlist$hat_prob)
hat_M_index= as.numeric(newlist$hat_M_index)
hat_logp = sapply(delta, function(x)nmcs:::logp_delta(hat_prob,x))
prob = mean(hat_M_index)
logP = sapply(delta, function(x)nmcs:::logp_delta(prob,x))
Elogp = colMeans(hat_logp)
RB = (Elogp - logP)/logP * 100
sd_hat_logp = apply(hat_logp, 2, sd)
CV = sd_hat_logp/ abs(Elogp)
result = data.frame(B, delta, Elogp, logP, RB, CV)
return(result)
}
eva.cs = function(width,cover, K, alpha,B){
##result of confidence sets
covering_prob = colSums(cover)/K
#length = colSums(2^width)/K
#ACP=covering_prob/ length
AW= colSums(width)/K
C.level= (1-alpha)*100
#SIS_rate= mean(sis_select)
result = data.frame( B, C.level, covering_prob, AW)
return(result)
}
flatten = function(alist,K){
newlist=alist[[1]]
if (K >1){
for(j in 2:K){
newlist=Map(rbind,newlist,alist[[j]])
}
}
return(newlist)
}
run_func=function(n, m, B, lambda_seq,alpha, family=gaussian(),penalty="adl",tune="bic1",delta=delta){
id = kronecker(1:n, rep(1,m))
true.beta = c(1, 1, rep(0,7))
true.D = matrix(c(9,4.8,0.6,0, 4.8,4,1,0, .6,1,1,0, 0,0,0,0), nrow=4, ncol=4)
p=length(true.beta)+nrow(true.D)
predictors=1:p
var_t=which(abs(c(true.beta,diag(true.D)))>0.001)
X= matrix(runif(m*n*9,-2,2), nrow=m*n)
Z= cbind(1,matrix(runif(m*n*3,-2,2), nrow=m*n))
simy <- gendat.glmm(id = list(cluster = id), X = X, beta =true.beta,
Z = list(cluster = Z), D = list(cluster = true.D), phi = 1, family = family)
y=simy$y
if (family$family[1]=="gaussian"){
fit_satlme4 <- lmer(y ~ X-1 + (Z-1 | id))
}else{
fit_satlme4 <- glmer(y ~ X-1 + (Z-1 | id),family=family,nAGQ = 0)
}
fit_sat <- build.start.fit(fit_satlme4, gamma = 2)
pen.weights=fit_sat$pen.weights
#pen.weights$fixed[1]=0
run=NMCS_rpql(y = y, X = X, Z =list(g1=Z), id =list(g1=id),
family=family, penalty=penalty,tune=tune,delta=delta,
lambda = lambda_seq,start=fit_sat,B=B,alpha=alpha,
pen.weights=pen.weights)
width =sapply(1: length(alpha), function(x)run$mcs[[x]]$width)
cover = sapply(1: length(alpha),function(x)all(
predictors[run$mcs[[x]]$LB] %in%c(0,var_t))
&all(var_t %in% predictors[run$mcs[[x]]$UB]))
#LogP
hat_M_index = as.numeric(all(predictors[run$hat_M$var_M] %in% c(0,var_t))&
all(var_t %in% predictors[run$hat_M$var_M]))
hat_prob =  run$hat_prob
result=list(width=width,cover=cover,hat_M_index=hat_M_index,
hat_prob=hat_prob)
return(result)
}
simu1 = function(n,m, B, alpha, K, cores,lambda,
family=gaussian(),penalty="adl",tune="bic1",delta=0.0001){
#Boot=lapply(1:K, function(x)run_func(B, lambda, alpha,family=family,penalty=penalty,tune=tune,delta=delta))
Boot = mclapply(1:K, function(x)run_func(n,m, B, lambda, alpha,family=family,
penalty=penalty,tune=tune,delta=delta),mc.cores=cores)
save(Boot,file = "Boot.RData")
k=length(Boot)
newlist = flatten(Boot,k)
##result of confidence sets
eva_cs=list()
eva_logp=list()
eva_cs= eva.cs( newlist$width,newlist$cover,K,
alpha,B)
eva_logp=eva.lop(newlist, delta,K, B)
write.table(cbind(familly=family$family[1],n,m, K, eva_cs), file ="cs_wo.csv", sep=",",
row.names=FALSE, col.names=FALSE,append = TRUE)
write.table(cbind(familly=family$family[1], n, m, K,eva_logp), file ="logp_wo.csv", sep=",",
row.names=FALSE, col.names=FALSE,append = TRUE)
return(list(eva_cs, eva_logp))
}
alpha=c(0.05,0.1)
B=200
K=100
cores=20
lambda_seq <- lseq(1e-6,0.5,length=20)
###gaussian
lambda_seq <- lseq(1e-6,0.1,length=20)
simu1(n=50,m=10, B=200,alpha,K=K,cores = cores,lambda = lambda_seq)
debug(simu1)
simu1(n=50,m=10, B=20,alpha,K=K,cores = cores,lambda = lambda_seq)
debug(run_func)
run_func(n,m, B, lambda, alpha,family=family,
penalty=penalty,tune=tune,delta=delta)
hat_M$collect.ics
hat_M$allv
hat_M$var_M
diagnostics <- read.csv("~/OneDrive - University of California, Davis/books/106fall2021/data/diagnostics.csv")
View(diagnostics)
diagnostics = read.csv("~/OneDrive - University of California, Davis/books/106fall2021/data/diagnostics.csv")###Replace the file path by your own local path when you use!
setwd("~/OneDrive - University of California, Davis/books/106fall2021/data")#set working directory to "datasets" folder
diagnostics = read.csv("diagnostics.csv")#read the data set in the folder
head(diagnostics)#Display the first six rows
diagnostics[1:6,]#Display the first six rows by row index
Y = diagnostics$response # Extract variables from dataset
Y = diagnostics[,2] # or Extract variables by column index
diagnostics[1,2]#Display the value is row 1 and column 2
# histograms
hist(Y)
hist(Y, xlab = 'response', ylab = 'frequency', main = 'Histogram of response')
# boxplots
boxplot(Y, main = 'Boxplot of response')
boxplot(response~treatment,data=diagnostics, main = 'Boxplot of response')
# scatterplots
X1 = diagnostics$weight
plot(X1, Y, xlab = 'treatment', ylab = 'response', main = 'Plot of treatment versus response')
# histograms
hist(Y)
hist(Y, xlab = 'response', ylab = 'frequency', main = 'Histogram of response')
# boxplots
boxplot(Y, main = 'Boxplot of response')
boxplot(response~treatment,data=diagnostics, main = 'Boxplot of response')
# scatterplots
X = diagnostics$treatment
plot(X, Y, xlab = 'treatment', ylab = 'response', main = 'Plot of treatment versus response')
dat.diag =
read.csv("~/OneDrive - University of California, Davis/books/106fall2021/data/diagnostics.csv")
anova.fit<-aov(response~treatment, data=dat.diag)
##this chunck is used to generate data
n=8;
treatment<-rep(c(0,1),each=n);
mu=5;alpha=2
response<- mu+alpha*treatment+rnorm(2*n,0,1.5)
dat<-matrix(0,nrow=2*n,ncol=2)
dat[,1]<-treatment
dat[,2]<-response
colnames(dat)<-c('Treatment','Response')
#colnames(dat)<-paste0('sample', 1:(2*n),sep='');
dat
simu1(n=60,m=10, B=200,alpha,K=K,cores = cores,lambda = lambda_seq)
run_func(n,m, B, lambda, alpha,family=family,
penalty=penalty,tune=tune,delta=delta)
p
var_t
id
X
Z
hat_M$allv
###gaussian
lambda_seq <- lseq(1e-6,1,length=30)
simu1(n=60,m=10, B=200,alpha,K=K,cores = cores,lambda = lambda_seq)
run_func(n,m, B, lambda, alpha,family=family,
penalty=penalty,tune=tune,delta=delta)
hat_M$allv
hat_M$var_M
hat_M$collect.ics
hat_M$collect.ics["bic1"]
hat_M$collect.ics[,"bic1"]
hat(hat_M$collect.ics[,"bic1"])
plot(hat_M$collect.ics[,"bic1"])
###gaussian
lambda_seq <- lseq(1e-6,0.5,length=30)
simu1(n=60,m=10, B=200,alpha,K=K,cores = cores,lambda = lambda_seq)
run_func(n,m, B, lambda, alpha,family=family,
penalty=penalty,tune=tune,delta=delta)
hat_M$var_M
hat_M$collect.ics[,"bic1"]
plot(hat_M$collect.ics[,"bic1"])
simu1(n=30,m=5, B=200,alpha,K=K,cores = cores,lambda = lambda_seq)
###gaussian
lambda_seq <- lseq(1e-6,0.5,length=30)
simu1(n=30,m=5, B=200,alpha,K=K,cores = cores,lambda = lambda_seq)
run_func(n,m, B, lambda, alpha,family=family,
penalty=penalty,tune=tune,delta=delta)
hat_M$var_M
B=10
B
B=10
simu1(n=30,m=5, B=10,alpha,K=K,cores = cores,lambda = lambda_seq)
run_func(n,m, B, lambda, alpha,family=family,
penalty=penalty,tune=tune,delta=delta)
hat_M$var_M
hat_M$allv
hat_M$collect.ics[,"bic1"]
plot(hat_M$collect.ics[,"bic1"])
result$hat_prob
Conf.I
B
(48.04+56.74-19.91-20)/2
