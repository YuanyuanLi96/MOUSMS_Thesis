X= X[,predictors]
}
if (!all(var_t %in% predictors)){
sis_select=F
}
}
pn=0
if (is.numeric(predictors))pn=length(predictors)
result=list()
#NMCS
if (pn>0){
nested = NMCS(Y, X, family, B, alpha, delta, penalty,tune)
width =sapply(1: length(alpha), function(x)nested$mcs[[x]]$width)
cover = sapply(1: length(alpha),function(x)all(
predictors[nested$mcs[[x]]$LB] %in%c(0,var_t))
&all(var_t %in% predictors[nested$mcs[[x]]$UB]))
#LogP
hat_M_index = as.numeric(all(predictors[nested$hat_M$var_M] %in% c(0,var_t))&
all(var_t %in% predictors[nested$hat_M$var_M]))
hat_prob =  nested$hat_prob
#MCB
mcb.width=NULL
mcb.cover=NULL
#if (family=="gaussian"){
#MCB=mcb.cv(X, Y, B, penalty=penalty, tune=tune)$mcbframe
#mcb.width = sapply(alpha, function(x)MCB$width[which(MCB$bcr>=1-x)[1]])
#mcb.cover = sapply(alpha,function(x)all(
#  predictors[as.numeric(MCB$lbm[which(MCB$bcr>=1-x)[1]][[1]])] %in%  c(0,var_t))
#   &all(var_t  %in% predictors[as.numeric(MCB$ubm[which(MCB$bcr>=1-x)[1]][[1]])]))
#}
result=list(width=width,cover=cover,hat_M_index=hat_M_index,
hat_prob=hat_prob, sis_select=sis_select,
mcb.width=mcb.width, mcb.cover=mcb.cover,pn=pn,
CRE=nested$CRE,
CREb=nested$CREb)
}else{
result=NULL####SKIP THIS RUN since no predictors survived!
}
return(result)
}
#Include non-zero intercept
simu_3.PL = function(case,family, B,n,p,sigmasq_t, alpha,
K, cores,r.names=NULL,
rho=0,penalty="scad", tune="bic",delta=0.0001,screen=FALSE,iter=TRUE){
if (is.null(r.names))r.names=family
Boot = mclapply(1:K, function(x)rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter),mc.cores=cores)
valid=which(sapply(Boot, function(x)!is.null(x)))
Bootn=Boot[valid]
k=length(Bootn)
#save(Bootn,file = "Bootn.RData")
newlist = flatten(Bootn,k)
##result of confidence sets
eva_cs=list()
eva_logp=list()
eva_cs= eva.cs(p, newlist$width,newlist$cover,newlist$sis_select,K,
alpha,n,B,sigmasq_t)
eva_logp=eva.lop(p, newlist, delta,K, n, B, sigmasq_t)
mcb_cs = rep(NULL,length(alpha))
if (family=="gaussian"){
mcb.cs= eva.cs(p, newlist$mcb.width,newlist$mcb.cover,newlist$sis_select,K, alpha,n,B,sigmasq_t)
eva_cs= cbind(eva_cs, method="MCB",mcb.cs)
}
write.table(cbind(case=case,rho=rho,penalty=penalty, eva_cs,iter=iter,k=k,
CRE=mean(newlist$CRE),CREb=mean(newlist$CREb)), file =paste(r.names,"_cs.csv",sep=""), sep=",",
row.names=FALSE, col.names=FALSE,append = TRUE)
write.table(cbind(case=case,rho=rho,penalty=penalty, eva_logp,iter=iter,k=k), file =paste(r.names,"_logp.csv",sep=""), sep=",",
row.names=FALSE, col.names=FALSE,append = TRUE)
return(list(eva_cs, eva_logp))
}
#setwd("~/NMAC3")
#------------------------------LogP simulation-------------------
nseq=c(50,100,200,500)
B=500
K=200
alpha=c(0.05,seq(0.1,0.7,by=0.1))
sigmasq_t=1
delta=1e-4
family="gaussian"
r.names= "comp1"
#-----------------NMCS simulations----------------
p=1000
n=200
B=500
K=200
iter=FALSE
B=200
K=200
iter=FALSE
tune="bic"
r.names=NULL
simu_3.PL(1,"gaussian", B,n,p, sigmasq_t,
alpha, K, cores,penalty="adlasso", tune=tune,screen = T,iter=iter,r.names=r.names)
debug(simu_3.PL)
simu_3.PL(1,"gaussian", B,n,p, sigmasq_t,
alpha, K, cores,penalty="adlasso", tune=tune,screen = T,iter=iter,r.names=r.names)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
debug(rep_3)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
#-----------------NMCS simulations----------------
p=1000
n=200
B=200
K=200
iter=FALSE
tune="bic"
r.names=NULL
simu_3.PL(1,"gaussian", B,n,p, sigmasq_t,
alpha, K, cores,penalty="adlasso", tune=tune,screen = T,iter=iter,r.names=r.names)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
CRE
hat_M_boot$cross_event
alpha
source("Nested_glm.R")#nested MCS method
simu_3.PL(1,"gaussian", B,n,p, sigmasq_t,
alpha, K, cores,penalty="adlasso", tune=tune,screen = T,iter=iter,r.names=r.names)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
simu_3.PL(1,"gaussian", B,n,p, sigmasq_t,
alpha, K, cores,penalty="adlasso", tune=tune,screen = T,iter=iter,r.names=r.names)
debug(rep_3)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
pn
CRE
hat_M_boot$cross_event
mean(CREb)
K
K=100
#-----------------NMCS simulations----------------
p=1000
n=200
B=200
K=100
iter=FALSE
tune="bic"
r.names=NULL
simu_3.PL(2,"gaussian", B,n,p, sigmasq_t,
alpha, K, cores,rho=0.5,penalty="adlasso", tune=tune,screen = T,iter=iter,r.names=r.names)
simu_3.PL(2,"gaussian", B,n,p, sigmasq_t,
alpha, K, cores,rho=0.5,penalty="adlasso", tune=tune,screen = T,iter=iter,r.names=r.names)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
B
nested$CREb
nested$CRE
simu_3.PL(3,"gaussian", B,n,p, sigmasq_t,
alpha, K, cores, rho=0.5,penalty="adlasso", tune=tune,screen = T,iter=iter,r.names=r.names)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
nested$CREb
nested$CRE
simu_3.PL(1,"binomial", B,n,p, sigmasq_t,
alpha, K, cores, penalty = "adlasso",tune = tune,screen = T,iter=iter)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
nested$CREb
simu_3.PL(2,"binomial", B,n,p, sigmasq_t,
alpha, K, cores, rho=0.5,penalty = "adlasso",tune = tune,screen = T,iter=iter)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
nested$CRE
nested$CREb
debug(NMCS)
NMCS(Y, X, family, B, alpha, delta, penalty,tune)
CREb
simu_3.PL(3,"binomial", B,n,p, sigmasq_t,
alpha, K, cores, rho=0.5,penalty = "adlasso",tune = tune,screen = T,iter=iter)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
undebug(NMCS)
simu_3.PL(3,"binomial", B,n,p, sigmasq_t,
alpha, K, cores, rho=0.5,penalty = "adlasso",tune = tune,screen = T,iter=iter)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
nested$CREb
simu_3.PL(4,"gam", 200, n,p,3,
alpha, K, cores, screen = T)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
predictors
cv.gam<- function(y, x,family,eps=1e-6){
n=length(y)
#lambda = lseq(50, 0.0001, 100)
bases=pseudo.bases(x,degree=6,df=4)
gamsel.cv=cv.gamsel(x,y,bases=bases)
alpha_norm = (gamsel.cv$gamsel.fit$alphas)^2
betas_norm = cf_norm(gamsel.cv$gamsel.fit$betas,6)
#coef_norm = alpha_norm+betas_norm
index=gamsel.cv$index.min
hat_M=which(alpha_norm[,index]>eps)
predy=predict(gamsel.cv$gamsel.fit,x,index=index,type="response")
sigmasq_est <- mean((predy-y)^2)
var.order= enter.order(alpha_norm)
len= length(hat_M)
cross_event=all(hat_M %in% var.order[1:len])&all(var.order[1:len]%in% hat_M)
return(list(len= len, var.order=var.order,var_M=hat_M, predy=predy
,sigmasq=sigmasq_est,
cross_event=cross_event))
}
simu_3.PL(4,"gam", 200, n,p,3,
alpha, K, cores, screen = T)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
nested$CREb
nested$CRE
simu_3.PL(4,"gam", 200, n,p,3,
alpha, K, cores, screen = T)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
hat_M$cross_event
debug(sel.method)
#select model using original data
hat_M = sel.method(y=Y, x=X, family=family, penalty,tune)#a list including \hat{M}, \hat{\psi} and rank
alpha_norm
which(alpha_norm[,index]>eps)
var.order
hat_M %in% var.order[1:len]
hat_M %in% var.order[1:len]
plot(gamsel.cv$gamsel.fit)
?gamsel.cv
??
gamsel.cv
?v.gamsel
?cv.gamsel
plot(gamsel.out,newx=X,index=index)
plot(gamsel.cv,newx=x,index=index)
plot(gamsel.cv$gamsel.fit,newx=x,index=index)
hat_M
gamsel.cv$gamsel.fit$degrees
gamsel.cv$gamsel.fit$alphas
which(alpha_norm[,index]>eps)
alpha_norm[,index]
?pseudo.bases
which(alpha_norm[,index]>eps)
enter.order(alpha_norm)
sort(enter.order(alpha_norm))
alpha_norm[9,]
dim(x)
sort(var.order[1:len])
which(alpha_norm[,index]>eps)
var.order[1:len]
alpha_norm[,10]
undebug(sel.method)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
width
cover
nested$CREb
nested$CRE
nested$mcs
K
cv.gam<- function(y, x,family,eps=1e-6){
n=length(y)
#lambda = lseq(50, 0.0001, 100)
bases=pseudo.bases(x,degree=6,df=4)
gamsel.cv=cv.gamsel(x,y,bases=bases)
alpha_norm = (gamsel.cv$gamsel.fit$alphas)^2
betas_norm = cf_norm(gamsel.cv$gamsel.fit$betas,6)
coef_norm = alpha_norm+betas_norm
index=gamsel.cv$index.min
hat_M=which(coef_norm[,index]>eps)
predy=predict(gamsel.cv$gamsel.fit,x,index=index,type="response")
sigmasq_est <- mean((predy-y)^2)
var.order= enter.order(coef_norm)
len= length(hat_M)
cross_event=all(hat_M %in% var.order[1:len])&all(var.order[1:len]%in% hat_M)
return(list(len= len, var.order=var.order,var_M=hat_M, predy=predy
,sigmasq=sigmasq_est,
cross_event=cross_event))
}
simu_3.PL(4,"gam", 200, n,p,3,
alpha, K, cores, screen = T)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
hat_M$var.order
hat_M$cross_event
hat_M$var_M
?cv.gamsel
?gamsel
cv.gam<- function(y, x,family,eps=1e-6){
n=length(y)
#lambda = lseq(50, 0.0001, 100)
nbase=5
bases=pseudo.bases(x,degree=nbase,df=3)
gamsel.cv=cv.gamsel(x,y,bases=bases)
alpha_norm = (gamsel.cv$gamsel.fit$alphas)^2
betas_norm = cf_norm(gamsel.cv$gamsel.fit$betas,nbase)
coef_norm = alpha_norm+betas_norm
index=gamsel.cv$index.min
hat_M=which(coef_norm[,index]>eps)
predy=predict(gamsel.cv$gamsel.fit,x,index=index,type="response")
sigmasq_est <- mean((predy-y)^2)
var.order= enter.order(coef_norm)
len= length(hat_M)
cross_event=all(hat_M %in% var.order[1:len])&all(var.order[1:len]%in% hat_M)
return(list(len= len, var.order=var.order,var_M=hat_M, predy=predy
,sigmasq=sigmasq_est,
cross_event=cross_event))
}
simu_3.PL(4,"gam", 200, n,p,3,
alpha, K, cores, screen = T)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
predictors
sis_select
simu_3.PL(4,"gam", 200, n,p,3,
alpha, K, cores, screen = T)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
alpha_norm
enter.order(alpha_norm)
enter.order(coef_norm)
enter.order(coef_norm)
hat_M
enter.order(coef_norm)
x
dim(x)
enter.order(alpha_norm)
enter.order(alpha_norm)
enter.order(coef_norm)
nbase=6
df=5
bases=pseudo.bases(x,degree=nbase,df=df)
gamsel.cv=cv.gamsel(x,y,bases=bases)
alpha_norm = (gamsel.cv$gamsel.fit$alphas)^2
betas_norm = cf_norm(gamsel.cv$gamsel.fit$betas,nbase)
coef_norm = alpha_norm+betas_norm
index=gamsel.cv$index.min
hat_M=which(coef_norm[,index]>eps)
hat_M
enter.order(coef_norm)
var.order = enter.order(alpha_norm)
var.order
which(alpha_norm[,index]>eps)
gamsel.cv=cv.gamsel(x,y,bases=bases,gamma=0.1)
alpha_norm = (gamsel.cv$gamsel.fit$alphas)^2
betas_norm = cf_norm(gamsel.cv$gamsel.fit$betas,nbase)
coef_norm = alpha_norm+betas_norm
index=gamsel.cv$index.min
which(coef_norm[,index]>eps)
which(alpha_norm[,index]>eps)
which(beta_norm[,index]>eps)
which(betas_norm[,index]>eps)
cf_norm(gamsel.cv$gamsel.fit$betas,nbase)
betas_norm = cf_norm(gamsel.cv$gamsel.fit$betas,nbase)
coef_norm = alpha_norm+betas_norm
betas_norm
enter.order(betas_norm)
getActive(gamsel.cv$gamsel.fit)
getActive(gamsel.cv$gamsel.fit,type="nonzero")
plot(gamsel.cv$name)
gamsel.cv$name
plot(gamsel.cv$gamsel.fit)
plot(gamsel.cv$gamsel.fit,newx=x)
bases=pseudo.bases(x,degree=nbase,df=3)
gamsel.cv=cv.gamsel(x,y,bases=bases)
alpha_norm = (gamsel.cv$gamsel.fit$alphas)^2
betas_norm = cf_norm(gamsel.cv$gamsel.fit$betas,nbase)
coef_norm = alpha_norm+betas_norm
which(coef_norm[,index]>eps)
nbase
which(alpha_norm[,index]>eps)
which(betas_norm[,index]>eps)
index=gamsel.cv$index.min
which(betas_norm[,index]>eps)
which(alpha_norm[,index]>eps)
nbase=5
bases=pseudo.bases(x,degree=nbase,df=3)
gamsel.cv=cv.gamsel(x,y,bases=bases)
alpha_norm = (gamsel.cv$gamsel.fit$alphas)^2
betas_norm = cf_norm(gamsel.cv$gamsel.fit$betas,nbase)
coef_norm = alpha_norm+betas_norm
index=gamsel.cv$index.min
which(coef_norm[,index]>eps)
which(alpha_norm[,index]>eps)
which(betas_norm[,index]>eps)
enter.order(coef_norm)
summary(gamsel.cv$gamsel.fit)
enter.order(alpha_norm)
plot(x[,1],y)
plot(x[,2],y)
plot(x[,3],y)
plot(x[,1],y)
plot(gamsel.cv$gamsel.fit)
plot(gamsel.cv$gamsel.fit,newx=x)
gamsel.cv=cv.gamsel(x,y,bases=bases,gamma=0.3)
plot(gamsel.cv$gamsel.fit,newx=x)
n=400
#-----------------NMCS simulations----------------
p=1000
n=200
B=200
K=100
debug(simu_3.PL)
simu_3.PL(4,"gam", 200, 400,p,3,
alpha, K, cores, screen = T)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
predictors
predictors
hat_M$var.order
length(hat_M$var.order)
simu_3.PL(4,"gam", 200, 400,500,3,
alpha, K, cores, screen = T)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
which(alpha_norm[,index]>eps)
which(alpha_norm[,index]>eps)
which(beta_norm[,index]>eps)
which(betas_norm[,index]>eps)
dim(x)
plot(gamsel.cv$gamsel.fit)
plot(gamsel.cv$gamsel.fit,newx=x)
?cv.gamsel
gamsel.cv=cv.gamsel(x,y,bases=bases,nfolds=5)
alpha_norm = (gamsel.cv$gamsel.fit$alphas)^2
betas_norm = cf_norm(gamsel.cv$gamsel.fit$betas,nbase)
coef_norm = alpha_norm+betas_norm
index=gamsel.cv$index.min
enter.order(coef_norm)
which(coef_norm[,index]>eps)
#-----------------NMCS simulations----------------
p=1000
n=200
B=200
K=100
iter=FALSE
simu_3.PL(4,"gam", 200, n,p,1,
alpha, K, cores, screen = T)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
var.order
which(coef_norm[,index]>eps)
which(alpha_norm[,index]>eps)
which(betas_norm[,index]>eps)
plot(gamsel.cv$gamsel.fit)
plot(gamsel.cv$gamsel.fit,newx=x)
plot(x[,1],y)
plot(x[,2],y)
plot(x[,3],y)
simu_3.PL(4,"gam", 200, n,p,1,
alpha, K, cores, screen = T)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
data$IR
simu_3.PL(4,"gam", 200, n,p,1,
alpha, K, cores, screen = T)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
?pseudo.bases
gamsel.cv$index.1se
which(coef_norm[,gamsel.cv$index.1se]>eps)
which(coef_norm[,gamsel.cv$index.min]>eps)
cv.gamsel()
?cv.gamsel
?cv.ncvreg
?cv.glmnet
source("Nested_glm.R")#nested MCS method
n
p
simu_3.PL(4,"gam", 200, n,p,1,
alpha, K, cores, screen = T)
rep_3(case,rho, family, sigmasq_t, B,
alpha,delta, n, p, penalty,tune,screen,iter)
which(alpha_norm[,index]>eps)
which(coef_norm[,index]>eps)
which(betas_norm[,index]>eps)
enter.order(coef_norm)
enter.order(alpha_norm)
cross_event
which(coef_norm[,index]>eps)
which(alpha_norm[,index]>eps)
gamsel.cv$gamsel.fit$degrees
summary(gamsel.cv$gamsel.fit)
enter.order(betas_norm)
gamsel.cv$gamsel.fit$betas
enter.order(betas_norm)
dim(x)
25*5
betas_norm
enter.order(betas_norm)
plot(gamsel.cv$gamsel.fit,newx=x)
order(enter.order(betas_norm))
sort(enter.order(betas_norm))
which(betas_norm[,index]>eps)
gamsel.cv$index.1se
gamsel.cv$index.min
gamsel.cv=cv.gamsel(x,y,bases=bases,nfold=5)
gamsel.cv$index.1se
alpha_norm = (gamsel.cv$gamsel.fit$alphas)^2
betas_norm = cf_norm(gamsel.cv$gamsel.fit$betas,nbase)
coef_norm = alpha_norm+betas_norm
index=gamsel.cv$index.1se
hat_M=which(coef_norm[,index]>eps)
which(coef_norm[,index]>eps)
which(alpha_norm[,index]>eps)
which(coef_norm[,index]>eps)
enter.order(coef_norm)
enter.order(betas_norm)
which(betas_norm[,index]>eps)
X = c(1,0,2,0,3,1,0,1,2,0)
Y = c(16, 9, 17, 12, 22, 13, 8, 15, 19, 11)
n = length(X)
b1hat = sum((X-mean(X))*(Y-mean(Y)))/sum((X-mean(X))^2)
?pnorm
pnorm(5,sd=5)-pnorm(-5,sd=5)
?pnorm
pnorm(5,sd=5)-pnorm(-5,sd=5)
